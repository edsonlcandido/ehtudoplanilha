/**
 * P√°gina de Configura√ß√£o
 * Gerencia autoriza√ß√£o Google OAuth e cria√ß√£o de planilha
 */

import { renderUserMenu } from '../components/user-menu';
import { GoogleOAuthService } from '../services/google-oauth';
import { SheetsService } from '../services/sheets';
import { pb } from '../main';

// ============================================================================
// Estado da P√°gina
// ============================================================================

interface PageState {
  hasRefreshToken: boolean;
  hasSheetId: boolean;
  sheetId?: string;
  sheetName?: string;
}

let pageState: PageState = {
  hasRefreshToken: false,
  hasSheetId: false,
};

// ============================================================================
// Elementos do DOM
// ============================================================================

const elements = {
  // Cart√£o 1: Autoriza√ß√£o Google
  googleAuthButton: document.getElementById('google-auth-button') as HTMLButtonElement,
  
  // Cart√£o 2: Planilha
  currentSheetName: document.getElementById('current-sheet-name') as HTMLParagraphElement,
  currentSheetDescription: document.getElementById('current-sheet-description') as HTMLParagraphElement,
  openSheetLink: document.getElementById('openSheetLink') as HTMLAnchorElement,
};

// ============================================================================
// Fun√ß√µes de UI
// ============================================================================

/**
 * Atualiza o bot√£o de autoriza√ß√£o Google
 */
function updateGoogleAuthButton(): void {
  if (!elements.googleAuthButton) return;

  if (pageState.hasRefreshToken) {
    elements.googleAuthButton.textContent = '‚úÖ Conectado ao Google Drive';
    elements.googleAuthButton.classList.remove('primary');
    elements.googleAuthButton.classList.add('success');
    elements.googleAuthButton.disabled = true;
  } else {
    elements.googleAuthButton.textContent = 'üîë Autorizar com Google';
    elements.googleAuthButton.classList.remove('success');
    elements.googleAuthButton.classList.add('primary');
    elements.googleAuthButton.disabled = false;
  }
}

/**
 * Atualiza as informa√ß√µes da planilha
 */
function updateSheetInfo(): void {
  if (!elements.currentSheetName || !elements.currentSheetDescription) return;

  if (pageState.hasSheetId && pageState.sheetName) {
    // Tem planilha configurada
    elements.currentSheetName.textContent = pageState.sheetName;
    elements.currentSheetName.style.color = '#27ae60';
    
    elements.currentSheetDescription.textContent = 
      'Sua planilha est√° pronta para uso. Clique no bot√£o abaixo para abrir no Google Drive.';
    
    // Mostrar link para abrir planilha
    if (elements.openSheetLink && pageState.sheetId) {
      elements.openSheetLink.href = `https://docs.google.com/spreadsheets/d/${pageState.sheetId}`;
      elements.openSheetLink.style.display = 'block';
    }
  } else {
    // N√£o tem planilha
    elements.currentSheetName.textContent = 'Nenhuma planilha configurada';
    elements.currentSheetName.style.color = '#e74c3c';
    
    if (pageState.hasRefreshToken) {
      elements.currentSheetDescription.textContent = 
        '‚è≥ Criando sua planilha automaticamente...';
    } else {
      elements.currentSheetDescription.textContent = 
        'Autorize o Google Drive para criar sua planilha automaticamente.';
    }
    
    // Esconder link
    if (elements.openSheetLink) {
      elements.openSheetLink.style.display = 'none';
    }
  }
}

/**
 * Mostra mensagem de sucesso tempor√°ria
 */
function showSuccessMessage(message: string): void {
  const alertDiv = document.createElement('div');
  alertDiv.className = 'alert success';
  alertDiv.style.cssText = 'position: fixed; top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
  alertDiv.innerHTML = `
    <strong>‚úÖ Sucesso!</strong>
    <p>${message}</p>
  `;
  
  document.body.appendChild(alertDiv);
  
  setTimeout(() => {
    alertDiv.remove();
  }, 4000);
}

/**
 * Mostra mensagem de erro tempor√°ria
 */
function showErrorMessage(message: string): void {
  const alertDiv = document.createElement('div');
  alertDiv.className = 'alert error';
  alertDiv.style.cssText = 'position: fixed; top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
  alertDiv.innerHTML = `
    <strong>‚ùå Erro!</strong>
    <p>${message}</p>
  `;
  
  document.body.appendChild(alertDiv);
  
  setTimeout(() => {
    alertDiv.remove();
  }, 5000);
}

// ============================================================================
// Fun√ß√µes de Neg√≥cio
// ============================================================================

/**
 * Carrega o status de configura√ß√£o do usu√°rio
 */
async function loadConfigStatus(): Promise<void> {
  try {
    console.log('üîç [loadConfigStatus] Iniciando...');
    const status = await SheetsService.getConfigStatus();
    
    console.log('üìä [loadConfigStatus] Status recebido do backend:', status);
    
    pageState = {
      hasRefreshToken: status.hasRefreshToken,
      hasSheetId: status.hasSheetId,
      sheetId: status.sheetId,
      sheetName: status.sheetName,
    };
    
    console.log('üìä [loadConfigStatus] PageState atualizado:', pageState);
    
    updateGoogleAuthButton();
    updateSheetInfo();
    
    console.log('‚úÖ Status carregado:', pageState);
    
    // Se tem refresh token mas n√£o tem planilha, criar automaticamente
    if (pageState.hasRefreshToken && !pageState.hasSheetId) {
      console.log('üîÑ Usu√°rio autorizado sem planilha, criando automaticamente...');
      console.log('üîÑ hasRefreshToken:', pageState.hasRefreshToken);
      console.log('üîÑ hasSheetId:', pageState.hasSheetId);
      await createSheetAutomatically();
    } else {
      console.log('‚ÑπÔ∏è N√£o criar planilha automaticamente porque:');
      console.log('  - hasRefreshToken:', pageState.hasRefreshToken);
      console.log('  - hasSheetId:', pageState.hasSheetId);
    }
  } catch (error) {
    console.error('‚ùå Erro ao carregar status:', error);
    showErrorMessage('Erro ao carregar configura√ß√µes. Tente recarregar a p√°gina.');
  }
}

/**
 * Cria planilha automaticamente ap√≥s autoriza√ß√£o
 */
async function createSheetAutomatically(): Promise<void> {
  try {
    // Atualizar UI para mostrar que est√° criando
    if (elements.currentSheetDescription) {
      elements.currentSheetDescription.textContent = '‚è≥ Criando sua planilha automaticamente...';
    }
    
    console.log('üìã Criando planilha automaticamente...');
    const result = await SheetsService.provisionSheet();
    
    console.log('‚úÖ Planilha criada:', result);
    
    // Atualizar estado local
    pageState.hasSheetId = true;
    pageState.sheetId = result.sheetId;
    pageState.sheetName = result.sheetName;
    
    updateSheetInfo();
    
    showSuccessMessage(`Planilha "${result.sheetName}" criada com sucesso! Voc√™ j√° pode come√ßar a usar.`);
    
  } catch (error: any) {
    console.error('‚ùå Erro ao criar planilha automaticamente:', error);
    showErrorMessage(
      error?.message || 'Erro ao criar planilha automaticamente. Tente recarregar a p√°gina.'
    );
  }
}

/**
 * Inicia o fluxo de autoriza√ß√£o OAuth
 */
async function handleGoogleAuth(): Promise<void> {
  try {
    const user = pb.authStore.record;
    if (!user?.id) {
      showErrorMessage('Usu√°rio n√£o autenticado.');
      return;
    }
    
    console.log('üîë Iniciando fluxo OAuth...');
    await GoogleOAuthService.startAuthFlow(user.id);
  } catch (error) {
    console.error('‚ùå Erro ao iniciar OAuth:', error);
    showErrorMessage('Erro ao iniciar autoriza√ß√£o com Google.');
  }
}

// ============================================================================
// Event Listeners
// ============================================================================

function setupEventListeners(): void {
  // Cart√£o 1: Autoriza√ß√£o Google
  elements.googleAuthButton?.addEventListener('click', handleGoogleAuth);
}

// ============================================================================
// Inicializa√ß√£o
// ============================================================================

async function init(): Promise<void> {
  // Renderiza menu do usu√°rio
  renderUserMenu();
  
  // Configura event listeners
  setupEventListeners();
  
  // Carrega status inicial
  await loadConfigStatus();
  
  console.log('‚úÖ P√°gina de configura√ß√£o inicializada');
}

// Inicializa quando o DOM estiver pronto
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', init);
} else {
  init();
}
